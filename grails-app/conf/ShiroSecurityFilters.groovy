/**
 * Generated by the Shiro plugin. This filters class protects all URLs
 * via access control by convention.
 */
class ShiroSecurityFilters {

	/**
	 * Array of controller/action combinations which will be skipped from authentication
	 * if the controller and action names match. The action value can also be '*' if it
	 * encompasses all actions within the controller.
	 */
	static nonAuthenticatedActions = [
		[controller: 'book', action: '*'],
		[controller: 'auth', action: '*'],
		[controller: 'signup', action: '*']
	]

	/**
	 * Array of controller/action combinations that will be authenticated against the user's
	 * role. The map also includes the roles which the controller/action pair will match
	 * against.
	 */
	static authenticatedActions = [
		[controller: 'own', action: '*', roles: ['ROLE_ADMIN', 'ROLE_USER']],
		[controller: 'borrow', action: '*', roles: ['ROLE_ADMIN', 'ROLE_USER']],
		[controller: 'shiroUser', action: '*', roles: ['ROLE_ADMIN']]
	]

	def filters = {

		all(controller: '*', action: '*') {
			//println("***ShiroSecurityFilters***")
			before = {
				//println("**********************")
				//println("controllerName:"+controllerName)
				//println("actionName:"+ actionName)
				// Determine if the controller/action belongs is not to be authenticated
				def needsAuth = !nonAuthenticatedActions.find {
					(it.controller == controllerName) &&
							((it.action == '*') || (it.action == actionName))
				}

				//println("needsAuth:"+needsAuth )
				if (needsAuth) {
					// Get the map within the authenticated actions which pertain to the current
					// controller and view.
					def authRoles = authenticatedActions.find {
						(it.controller == controllerName) &&
								((it.action == '*') || (it.action == actionName))
					}
					//println("authRoles:"+authRoles )

					if (authRoles) {

						// Perform the access control for each of the roles provided in the authRoles
						accessControl {
							//def numrole1=0
							authRoles.roles.find { roleName ->
								def numrole=role(roleName)
								//numrole1=numrole||numrole1
								}
							//return numrole1
							//println("roleName:"+roleName)
							/*for (roleName in authRoles.roles) {
							 def numrole=role(roleName)
								println("numrole:"+numrole)
								println("roleName:"+roleName)}*/
						}
					}

					// Skip authentication if the authRoles was not found
					else {
						return true
					}
				}

				// Skip authentication if no auth is needed
				else {
					return true
				}
			}
		}

	}
}
